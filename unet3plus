import torch
import torch.nn as nn
import torch.nn.functional as F
from torchsummary import summary


class DoubleConv(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels
        self.double_conv = nn.Sequential(
            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(mid_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        # print("DoubleConv Input Shape:", x.shape)
        x = self.double_conv(x)
        # print("DoubleConv Output Shape:", x.shape)
        return x


class DeepSupervisionBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(DeepSupervisionBlock, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        x = self.conv(x)
        x = F.softmax(x, dim=1)  # apply sigmoid
        return x


class UNet3Plus(nn.Module):
    def __init__(self, n_channels, n_classes, bilinear=False):
        super(UNet3Plus, self).__init__()
        self.n_channels = n_channels
        self.n_classes = n_classes
        self.bilinear = bilinear

        self.inc = DoubleConv(n_channels, 64)
        self.down1 = Down(64, 128)
        self.down2 = Down(128, 256)
        self.down3 = Down(256, 512)
        factor = 2 if bilinear else 1
        self.down4 = Down(512, 1024 // factor)

        self.up1 = Up(1024, 512 // factor, bilinear, skip_in_channels=[512])
        self.up2 = Up(512, 256 // factor, bilinear, skip_in_channels=[256])
        self.up3 = Up(256, 128 // factor, bilinear, skip_in_channels=[128])
        self.up4 = Up(128, 64, bilinear, skip_in_channels=[64])

        self.outc = OutConv(64, n_classes)

        # Deep Supervision Blocks
        self.ds_block1 = DeepSupervisionBlock(in_channels=512, out_channels=n_classes)
        self.ds_block2 = DeepSupervisionBlock(in_channels=256, out_channels=n_classes)
        self.ds_block3 = DeepSupervisionBlock(in_channels=128, out_channels=n_classes)
        self.ds_block4 = DeepSupervisionBlock(in_channels=64, out_channels=n_classes)

    def forward(self, x):
        x1 = self.inc(x)
        x2 = self.down1(x1)
        x3 = self.down2(x2)
        x4 = self.down3(x3)
        x5 = self.down4(x4)

        x_up1 = self.up1(x5, [x4])
        x_up2 = self.up2(x_up1, [x3])
        x_up3 = self.up3(x_up2, [x2])
        x_up4 = self.up4(x_up3, [x1])

        final_output = self.outc(x_up4)

        # Apply deep supervision
        ds_output1 = self.ds_block1(x_up1)
        ds_output2 = self.ds_block2(x_up2)
        ds_output3 = self.ds_block3(x_up3)
        ds_output4 = self.ds_block4(x_up4)

        # Include intermediate and deep supervision results in the return
        return final_output, ds_output1, ds_output2, ds_output3, ds_output4

    def use_checkpointing(self):
        # Your existing checkpointing code remains unchanged
        self.inc = torch.utils.checkpoint(self.inc)
        self.down1 = torch.utils.checkpoint(self.down1)
        self.down2 = torch.utils.checkpoint(self.down2)
        self.down3 = torch.utils.checkpoint(self.down3)
        self.down4 = torch.utils.checkpoint(self.down4)
        self.up1 = torch.utils.checkpoint(self.up1)
        self.up2 = torch.utils.checkpoint(self.up2)
        self.up3 = torch.utils.checkpoint(self.up3)
        self.up4 = torch.utils.checkpoint(self.up4)
        self.outc = torch.utils.checkpoint(self.outc)


class Up(nn.Module):
    """Upscaling then double conv"""

    def __init__(self, in_channels, out_channels, bilinear=True, skip_in_channels=None):
        super().__init__()

        self.skip_in_channels = skip_in_channels

        # if bilinear, use the normal convolutions to reduce the number of channels
        if bilinear:
            self.up = nn.Upsample(size=(480, 640), mode='bilinear', align_corners=True)
            self.conv = DoubleConv(in_channels, out_channels, in_channels // 2)
        else:
            self.up = nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size=2, stride=2)
            self.conv = DoubleConv(in_channels, out_channels)

    def forward(self, x, skip_connections):  # updated to use "skip"
        x = self.up(x)

        # Concatenate skip connections
        for i, skip_connection in enumerate(skip_connections):  # downsampling pt to each upsampling
            x = torch.cat([x, skip_connection], dim=1)

        x = self.conv(x)
        return x


class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        return self.conv(x)


class Down(nn.Module):
    """Downscaling with maxpool then double conv"""

    def __init__(self, in_channels, out_channels):
        super().__init__()

        self.maxpool_conv = nn.Sequential(
            nn.MaxPool2d(2),
            DoubleConv(in_channels, out_channels)
        )

    def forward(self, x):
        # print("Down Input Shape:", x.shape)
        x = self.maxpool_conv(x)
        # print("Down Output Shape:", x.shape)
        return x


if __name__ == '__main__':  # for testing
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

    # Move the input tensor to the same device as the model
    a = torch.randn(1, 3, 480, 640).to(device)

    # Move the model to the same device as the input tensor
    net = UNet3Plus(n_channels=3, n_classes=3).to(device)

    # Print the output shape
    output = net(a)  # 9 , 4 , 3 ,320 ,320
    print(len(output))
    for out in output:
        print(out.size())
    # Access the shapes of individual outputs
    """logits_shape = output[0].shape
    x_up1_shape = output[1].shape
    x_up2_shape = output[2].shape
    x_up3_shape = output[3].shape
    x_up4_shape = output[4].shape
    ds_output1_shape = output[5].shape
    ds_output2_shape = output[6].shape
    ds_output3_shape = output[7].shape
    ds_output4_shape = output[8].shape

    # Print the shapes
    print("Logits Shape:", logits_shape)
    print("x_up1 Shape:", x_up1_shape)
    print("x_up2 Shape:", x_up2_shape)
    print("x_up3 Shape:", x_up3_shape)
    print("x_up4 Shape:", x_up4_shape)
    print("Deep Supervision Output 1 Shape:", ds_output1_shape)
    print("Deep Supervision Output 2 Shape:", ds_output2_shape)
    print("Deep Supervision Output 3 Shape:", ds_output3_shape)
    print("Deep Supervision Output 4 Shape:", ds_output4_shape)"""

    # Print the model summary
    # summary(net, input_size=(3, 320, 320))

